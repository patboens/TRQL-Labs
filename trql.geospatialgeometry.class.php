<?php
/****************************************************************************************/
/*
    {PYB} is a shortcut for Patrick Boens

    {COMPANY} is a shortcut to "Lato Sensu Management"

    {RIGHTS} is a shortcut used by trql.documentor.class.php. In general the material
    presented here is available under the conditions of 
    https://creativecommons.org/licenses/by-sa/4.0/

    Other shortcuts exist. They exist to make it simple to change the formulation
    of parts that can vary over time.

    It does not change the undisputed truth that ALL code has been created by
    Patrick Boens, the author, who owns ALL the intellectual property of what
    he created.

    The code of this class has been generated by 

*/

/** {{{*fheader
    {*file                  trql.geospatialgeometry.class.php *}
    {*purpose               (Eventually to be defined as) a supertype of GeoShape
                            designed to accommodate definitions from Geo-Spatial best
                            practices. *}
    {*author                {PYB} *}
    {*company               {COMPANY} *}
    {*cdate                 26-08-2020 18:48 *}
    {*mdate                 auto *}
    {*license               {RIGHTS} *}

    -------------------------------------------------------------------------------------
    Changes History:
    -------------------------------------------------------------------------------------

    {*chist
        {*mdate 26-08-2020 18:48 *}
        {*author {PYB} *}
        {*v 8.0.0000 *}
        {*desc              1)  Original creation
        *}
    *}

    {*chist
        {*mdate 10-02-21 06:54 *}
        {*author {PYB} *}
        {*v 8.0.0000 *}
        {*desc              1)  Standardizing the [c]__destruct()[/c] method
        *}
    *}


    *}}} */
/****************************************************************************************/
namespace trql\geospatialgeometry;

use \trql\vaesoli\Vaesoli                   as Vaesoli;
use \trql\intangible\Intangible    as Intangible;


if ( ! defined( 'VAESOLI_CLASS_VERSION' ) )
    require_once( 'trql.vaesoli.class.php' );

if ( ! defined( 'INTANGIBLE_CLASS_VERSION' ) )
    require_once( 'trql.intangible.class.php' );



defined( 'GEOSPATIALGEOMETRY_CLASS_VERSION' ) or define( 'GEOSPATIALGEOMETRY_CLASS_VERSION','0.1' );

/* ==================================================================================== */
/** {{*class GeospatialGeometry=

    {*desc

        (Eventually to be defined as) a supertype of GeoShape designed to
        accommodate definitions from Geo-Spatial best practices.

    *}

    {*credits
        The whole concept is derived from the fabulous work of Schema.org
        under the terms of their license:
        [url]http://schema.org/docs/terms.html[/url]
    *}

    {*doc [url]http://schema.org/GeospatialGeometry[/url] *}

    {*warning
        This class has been generated automatically by [c]trql.schemaclassgenerator.class.php[/c]
        on 26-08-2020 18:48. IT HAS NOT BEEN TESTED YET!
    *}

 */
/* ==================================================================================== */
class GeospatialGeometry extends Intangible
/*--------------------------------------*/
{
    protected   $self = array( 'file'   => __FILE__     ,           /* {*property   $self                           (array)                         Fixed 'class' information. *} */
                               'class'  => __CLASS__    ,
                               'name'   => null         ,
                               'birth'  => null         ,
                               'home'   => null         ,
                               'family' => null         ,
                               'UIKey'  => null         ,
                             );

    public      $additionalType                 = null;             /* {*property   $additionalType                 (URL)                           An additional type for the item, typically used for adding more
                                                                                                                                                    specific types from external vocabularies in microdata syntax. This is
                                                                                                                                                    a relationship between something and a class that the thing is in. In
                                                                                                                                                    RDFa syntax, it is better to use the native RDFa syntax - the 'typeof'
                                                                                                                                                    attribute - for multiple types. Schema.org tools may have only weaker
                                                                                                                                                    understanding of extra types, in particular those defined externally. *} */
    public      $alternateName                  = null;             /* {*property   $alternateName                  (string)                        An alias for the item. *} */
    public      $description                    = null;             /* {*property   $description                    (string)                        A description of the item. *} */
    public      $disambiguatingDescription      = null;             /* {*property   $disambiguatingDescription      (string)                        A sub property of description. A short description of the item used to
                                                                                                                                                    disambiguate from other, similar items. Information from other
                                                                                                                                                    properties (in particular, name) may be necessary for the description
                                                                                                                                                    to be useful for disambiguation. *} */
    public      $geoContains                    = null;             /* {*property   $geoContains                    (GeospatialGeometry|Place)      Represents a relationship between two geometries (or the places they
                                                                                                                                                    represent), relating a containing geometry to a contained geometry. "a
                                                                                                                                                    contains b iff no points of b lie in the exterior of a, and at least
                                                                                                                                                    one point of the interior of b lies in the interior of a". As defined
                                                                                                                                                    in DE-9IM. *} */
    public      $geoCoveredBy                   = null;             /* {*property   $geoCoveredBy                   (GeospatialGeometry|Place)      Represents a relationship between two geometries (or the places they
                                                                                                                                                    represent), relating a geometry to another that covers it. As defined
                                                                                                                                                    in DE-9IM. *} */
    public      $geoCovers                      = null;             /* {*property   $geoCovers                      (Place|GeospatialGeometry)      Represents a relationship between two geometries (or the places they
                                                                                                                                                    represent), relating a covering geometry to a covered geometry. "Every
                                                                                                                                                    point of b is a point of (the interior or boundary of) a". As defined
                                                                                                                                                    in DE-9IM. *} */
    public      $geoCrosses                     = null;             /* {*property   $geoCrosses                     (GeospatialGeometry|Place)      Represents a relationship between two geometries (or the places they
                                                                                                                                                    represent), relating a geometry to another that crosses it: "a crosses
                                                                                                                                                    b: they have some but not all interior points in common, and the
                                                                                                                                                    dimension of the intersection is less than that of at least one of
                                                                                                                                                    them". As defined in DE-9IM. *} */
    public      $geoDisjoint                    = null;             /* {*property   $geoDisjoint                    (GeospatialGeometry|Place)      Represents spatial relations in which two geometries (or the places
                                                                                                                                                    they represent) are topologically disjoint: they have no point in
                                                                                                                                                    common. They form a set of disconnected geometries." (a symmetric
                                                                                                                                                    relationship, as defined in DE-9IM) *} */
    public      $geoEquals                      = null;             /* {*property   $geoEquals                      (GeospatialGeometry|Place)      Represents spatial relations in which two geometries (or the places
                                                                                                                                                    they represent) are topologically equal, as defined in DE-9IM. "Two
                                                                                                                                                    geometries are topologically equal if their interiors intersect and no
                                                                                                                                                    part of the interior or boundary of one geometry intersects the
                                                                                                                                                    exterior of the other" (a symmetric relationship) *} */
    public      $geoIntersects                  = null;             /* {*property   $geoIntersects                  (Place|GeospatialGeometry)      Represents spatial relations in which two geometries (or the places
                                                                                                                                                    they represent) have at least one point in common. As defined in
                                                                                                                                                    DE-9IM. *} */
    public      $geoOverlaps                    = null;             /* {*property   $geoOverlaps                    (GeospatialGeometry|Place)      Represents a relationship between two geometries (or the places they
                                                                                                                                                    represent), relating a geometry to another that geospatially overlaps
                                                                                                                                                    it, i.e. they have some but not all points in common. As defined in
                                                                                                                                                    DE-9IM. *} */
    public      $geoTouches                     = null;             /* {*property   $geoTouches                     (Place|GeospatialGeometry)      Represents spatial relations in which two geometries (or the places
                                                                                                                                                    they represent) touch: they have at least one boundary point in
                                                                                                                                                    common, but no interior points." (a symmetric relationship, as defined
                                                                                                                                                    in DE-9IM ) *} */
    public      $geoWithin                      = null;             /* {*property   $geoWithin                      (Place|GeospatialGeometry)      Represents a relationship between two geometries (or the places they
                                                                                                                                                    represent), relating a geometry to one that contains it, i.e. it is
                                                                                                                                                    inside (i.e. within) its interior. As defined in DE-9IM. *} */
    public      $identifier                     = null;             /* {*property   $identifier                     (URL|string|PropertyValue)      The identifier property represents any kind of identifier for any kind
                                                                                                                                                    of Thing, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides
                                                                                                                                                    dedicated properties for representing many of these, either as textual
                                                                                                                                                    strings or as URL (URI) links. See background notes for more details. *} */
    public      $image                          = null;             /* {*property   $image                          (ImageObject|URL)               An image of the item. This can be a URL or a fully described
                                                                                                                                                    ImageObject. *} */
    public      $mainEntityOfPage               = null;             /* {*property   $mainEntityOfPage               (CreativeWork|URL)              Indicates a page (or other CreativeWork) for which this thing is the
                                                                                                                                                    main entity being described. See background notes for details. *} */
    public      $name                           = null;             /* {*property   $name                           (string)                        The name of the item. *} */
    public      $potentialAction                = null;             /* {*property   $potentialAction                (Action)                        Indicates a potential Action, which describes an idealized action in
                                                                                                                                                    which this thing would play an 'object' role. *} */
    public      $sameAs                         = null;             /* {*property   $sameAs                         (URL)                           URL of a reference Web page that unambiguously indicates the item's
                                                                                                                                                    identity. E.g. the URL of the item's Wikipedia page, Wikidata entry,
                                                                                                                                                    or official website. *} */
    public      $subjectOf                      = null;             /* {*property   $subjectOf                      (Event|CreativeWork)            A CreativeWork or Event about this Thing. *} */
    public      $url                            = null;             /* {*property   $url                            (URL)                           URL of the item. *} */


    /* === [Properties NOT defined in schema.org] ===================================== */


    /* ================================================================================ */
    /** {{*__construct( [$szHome] )=

        Class constructor

        {*params
            $szHome     (string)        Home of the class. Optional.
        *}

        {*return
            (self)      The current instance of the class
        *}

        *}}
    */
    /* ================================================================================ */
    public function __construct( $szHome = null )
    /*-----------------------------------------*/
    {
        parent::__construct();
        $this->updateSelf( __CLASS__,'/q/common/trql.classes.home/' . basename( __FILE__,'.php' ) );

        $this->die( __CLASS__ . ' has NOT been tested yet! Disable this line when you have tested the class.' );

        return ( $this );
    }   /* End of GeospatialGeometry.__construct() ========================================== */
    /* ================================================================================ */


    /* ================================================================================ */
    /** {{*__destruct()=

        Class destructor

        {*params
        *}

        {*return
            (void)      No return
        *}

        *}}
    */
    /* ================================================================================ */
    public function __destruct()
    /*------------------------*/
    {
        $this->backup();
        $this->autodoc();
        $this->UIKey();
        $this->WikiData();
        $this->necroSignaling();
    }   /* End of GeospatialGeometry.__destruct() =========================================== */
    /* ================================================================================ */

}   /* End of class GeospatialGeometry ====================================================== */
/* ==================================================================================== */

?>