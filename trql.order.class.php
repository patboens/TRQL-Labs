<?php
/****************************************************************************************/
/*
    {PYB} is a shortcut for Patrick Boens

    {COMPANY} is a shortcut to "Lato Sensu Management"

    {RIGHTS} is a shortcut used by trql.documentor.class.php. In general the material
    presented here is available under the conditions of 
    https://creativecommons.org/licenses/by-sa/4.0/

    Other shortcuts exist. They exist to make it simple to change the formulation
    of parts that can vary over time.

    It does not change the undisputed truth that ALL code has been created by
    Patrick Boens, the author, who owns ALL the intellectual property of what
    he created.

    The code of this class has been generated by 

*/

/** {{{*fheader
    {*file                  trql.order.class.php *}
    {*purpose               An order is a confirmation of a transaction (a receipt),
                            which can contain multiple line items, each represented by
                            an Offer that has been accepted by the customer. *}
    {*author                {PYB} *}
    {*company               {COMPANY} *}
    {*cdate                 28-08-2020 14:01 *}
    {*mdate                 auto *}
    {*license               {RIGHTS} *}

    -------------------------------------------------------------------------------------
    Changes History:
    -------------------------------------------------------------------------------------

    {*chist
        {*mdate 28-08-2020 14:01 *}
        {*author {PYB} *}
        {*v 8.0.0000 *}
        {*desc              1)  Original creation
        *}
    *}


    *}}} */
/****************************************************************************************/
namespace trql\order;

use \trql\vaesoli\Vaesoli                   as Vaesoli;
use \trql\intangible\Intangible    as Intangible;


if ( ! defined( 'VAESOLI_CLASS_VERSION' ) )
    require_once( 'trql.vaesoli.class.php' );

if ( ! defined( 'INTANGIBLE_CLASS_VERSION' ) )
    require_once( 'trql.intangible.class.php' );



defined( 'ORDER_CLASS_VERSION' ) or define( 'ORDER_CLASS_VERSION','0.1' );

/* ==================================================================================== */
/** {{*class Order=

    {*desc

        An order is a confirmation of a transaction (a receipt), which can contain
        multiple line items, each represented by an Offer that has been accepted by
        the customer.

    *}

    {*credits
        The whole concept is derived from the fabulous work of Schema.org
        under the terms of their license:
        [url]http://schema.org/docs/terms.html[/url]
    *}

    {*doc [url]http://schema.org/Order[/url] *}

    {*warning
        This class has been generated automatically by [c]trql.schemaclassgenerator.class.php[/c]
        on 28-08-2020 14:01. IT HAS NOT BEEN TESTED YET!
    *}

 */
/* ==================================================================================== */
class Order extends Intangible
/*--------------------------------------*/
{
    protected   $self = array( 'file'   => __FILE__     ,           /* {*property   $self                           (array)                         Fixed 'class' information. *} */
                               'class'  => __CLASS__    ,
                               'name'   => null         ,
                               'birth'  => null         ,
                               'home'   => null         ,
                               'family' => null         ,
                               'UIKey'  => null         ,
                             );

    public      $acceptedOffer                  = null;             /* {*property   $acceptedOffer                  (Offer)                         The offer(s) -- e.g., product, quantity and price combinations --
                                                                                                                                                    included in the order. *} */
    public      $additionalType                 = null;             /* {*property   $additionalType                 (URL)                           An additional type for the item, typically used for adding more
                                                                                                                                                    specific types from external vocabularies in microdata syntax. This is
                                                                                                                                                    a relationship between something and a class that the thing is in. In
                                                                                                                                                    RDFa syntax, it is better to use the native RDFa syntax - the 'typeof'
                                                                                                                                                    attribute - for multiple types. Schema.org tools may have only weaker
                                                                                                                                                    understanding of extra types, in particular those defined externally. *} */
    public      $alternateName                  = null;             /* {*property   $alternateName                  (string)                        An alias for the item. *} */
    public      $billingAddress                 = null;             /* {*property   $billingAddress                 (PostalAddress)                 The billing address for the order. *} */
    public      $broker                         = null;             /* {*property   $broker                         (Person|Organization)           An entity that arranges for an exchange between a buyer and a seller.
                                                                                                                                                    In most cases a broker never acquires or releases ownership of a
                                                                                                                                                    product or service involved in an exchange. If it is not clear whether
                                                                                                                                                    an entity is a broker, seller, or buyer, the latter two terms are
                                                                                                                                                    preferred. *} */
    public      $confirmationNumber             = null;             /* {*property   $confirmationNumber             (string)                        A number that confirms the given order or payment has been received. *} */
    public      $customer                       = null;             /* {*property   $customer                       (Person|Organization)           Party placing the order or paying the invoice. *} */
    public      $description                    = null;             /* {*property   $description                    (string)                        A description of the item. *} */
    public      $disambiguatingDescription      = null;             /* {*property   $disambiguatingDescription      (string)                        A sub property of description. A short description of the item used to
                                                                                                                                                    disambiguate from other, similar items. Information from other
                                                                                                                                                    properties (in particular, name) may be necessary for the description
                                                                                                                                                    to be useful for disambiguation. *} */
    public      $discount                       = null;             /* {*property   $discount                       (string|float)                  Any discount applied (to an Order). *} */
    public      $discountCode                   = null;             /* {*property   $discountCode                   (string)                        Code used to redeem a discount. *} */
    public      $discountCurrency               = null;             /* {*property   $discountCurrency               (string)                        The currency of the discount.Use standard formats: ISO 4217 currency
                                                                                                                                                    format e.g. "USD"; Ticker symbol for cryptocurrencies e.g. "BTC"; well
                                                                                                                                                    known names for Local Exchange Tradings Systems (LETS) and other
                                                                                                                                                    currency types e.g. "Ithaca HOUR". *} */
    public      $identifier                     = null;             /* {*property   $identifier                     (URL|string|PropertyValue)      The identifier property represents any kind of identifier for any kind
                                                                                                                                                    of Thing, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides
                                                                                                                                                    dedicated properties for representing many of these, either as textual
                                                                                                                                                    strings or as URL (URI) links. See background notes for more details. *} */
    public      $image                          = null;             /* {*property   $image                          (ImageObject|URL)               An image of the item. This can be a URL or a fully described
                                                                                                                                                    ImageObject. *} */
    public      $isGift                         = null;             /* {*property   $isGift                         (boolean)                       Was the offer accepted as a gift for someone other than the buyer. *} */
    public      $mainEntityOfPage               = null;             /* {*property   $mainEntityOfPage               (CreativeWork|URL)              Indicates a page (or other CreativeWork) for which this thing is the
                                                                                                                                                    main entity being described. See background notes for details. *} */
    public      $merchant                       = null;             /* {*property   $merchant                       (Person|Organization)           'merchant' is an out-dated term for 'seller'. *} */
    public      $name                           = null;             /* {*property   $name                           (string)                        The name of the item. *} */
    public      $orderDate                      = null;             /* {*property   $orderDate                      (Date|DateTime)                 Date order was placed. *} */
    public      $orderDelivery                  = null;             /* {*property   $orderDelivery                  (ParcelDelivery)                The delivery of the parcel related to this order or order item. *} */
    public      $orderNumber                    = null;             /* {*property   $orderNumber                    (string)                        The identifier of the transaction. *} */
    public      $orderStatus                    = null;             /* {*property   $orderStatus                    (OrderStatus)                   The current status of the order. *} */
    public      $orderedItem                    = null;             /* {*property   $orderedItem                    (OrderItem|Product|Service)     The item ordered. *} */
    public      $partOfInvoice                  = null;             /* {*property   $partOfInvoice                  (Invoice)                       The order is being paid as part of the referenced Invoice. *} */
    public      $paymentDue                     = null;             /* {*property   $paymentDue                     (DateTime)                      The date that payment is due. *} */
    public      $paymentDueDate                 = null;             /* {*property   $paymentDueDate                 (Date|DateTime)                 The date that payment is due. *} */
    public      $paymentMethod                  = null;             /* {*property   $paymentMethod                  (PaymentMethod)                 The name of the credit card or other method of payment for the order. *} */
    public      $paymentMethodId                = null;             /* {*property   $paymentMethodId                (string)                        An identifier for the method of payment used (e.g. the last 4 digits
                                                                                                                                                    of the credit card). *} */
    public      $paymentUrl                     = null;             /* {*property   $paymentUrl                     (URL)                           The URL for sending a payment. *} */
    public      $potentialAction                = null;             /* {*property   $potentialAction                (Action)                        Indicates a potential Action, which describes an idealized action in
                                                                                                                                                    which this thing would play an 'object' role. *} */
    public      $sameAs                         = null;             /* {*property   $sameAs                         (URL)                           URL of a reference Web page that unambiguously indicates the item's
                                                                                                                                                    identity. E.g. the URL of the item's Wikipedia page, Wikidata entry,
                                                                                                                                                    or official website. *} */
    public      $seller                         = null;             /* {*property   $seller                         (Person|Organization)           An entity which offers (sells / leases / lends / loans) the services /
                                                                                                                                                    goods. A seller may also be a provider. *} */
    public      $subjectOf                      = null;             /* {*property   $subjectOf                      (Event|CreativeWork)            A CreativeWork or Event about this Thing. *} */
    public      $url                            = null;             /* {*property   $url                            (URL)                           URL of the item. *} */


    /* === [Properties NOT defined in schema.org] ===================================== */
    public      $wikidataId                     = null;


    /* ================================================================================ */
    /** {{*__construct( [$szHome] )=

        Class constructor

        {*params
            $szHome     (string)        Home of the class. Optional.
        *}

        {*return
            (self)      The current instance of the class
        *}

        *}}
    */
    /* ================================================================================ */
    public function __construct( $szHome = null )
    /*-----------------------------------------*/
    {
        parent::__construct();
        $this->updateSelf( __CLASS__,'/q/common/trql.classes.home/' . basename( __FILE__,'.php' ) );

        $this->die( __CLASS__ . ' has NOT been tested yet! Disable this line when you have tested the class.' );

        return ( $this );
    }   /* End of Order.__construct() ========================================== */
    /* ================================================================================ */


    /* ================================================================================ */
    /** {{*__destruct()=

        Class destructor

        {*params
        *}

        {*return
            (void)      No return
        *}

        *}}
    */
    /* ================================================================================ */
    public function __destruct()
    /*------------------------*/
    {
        $this->backup();
        $this->autodoc();
        $this->UIKey();
        $this->WikiData();
        $this->necroSignaling();
    }   /* End of Order.__destruct() =========================================== */
    /* ================================================================================ */

}   /* End of class Order ====================================================== */
/* ==================================================================================== */

?>