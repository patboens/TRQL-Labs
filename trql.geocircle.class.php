<?php
/****************************************************************************************/
/*
    {PYB} is a shortcut for Patrick Boens

    {COMPANY} is a shortcut to "Lato Sensu Management"

    {RIGHTS} is a shortcut used by trql.documentor.class.php. In general the material
    presented here is available under the conditions of 
    https://creativecommons.org/licenses/by-sa/4.0/

    Other shortcuts exist. They exist to make it simple to change the formulation
    of parts that can vary over time.

    It does not change the undisputed truth that ALL code has been created by
    Patrick Boens, the author, who owns ALL the intellectual property of what
    he created.

    The code of this class has been generated by 

*/

/** {{{*fheader
    {*file                  trql.geocircle.class.php *}
    {*purpose               A GeoCircle is a GeoShape representing a circular geographic
                            area. As it is a GeoShape it provides the simple textual
                            property 'circle', but also allows the combination of
                            postalCode alongside geoRadius. The center of the circle can
                            be indicated via the 'geoMidpoint' property, or more
                            approximately using 'address', 'postalCode'. *}
    {*author                {PYB} *}
    {*company               {COMPANY} *}
    {*cdate                 26-08-2020 18:48 *}
    {*mdate                 auto *}
    {*license               {RIGHTS} *}

    -------------------------------------------------------------------------------------
    Changes History:
    -------------------------------------------------------------------------------------

    {*chist
        {*mdate 26-08-2020 18:48 *}
        {*author {PYB} *}
        {*v 8.0.0000 *}
        {*desc              1)  Original creation
        *}
    *}


    *}}} */
/****************************************************************************************/
namespace trql\geocircle;

use \trql\vaesoli\Vaesoli                   as Vaesoli;
use \trql\geoshape\GeoShape    as GeoShape;


if ( ! defined( 'VAESOLI_CLASS_VERSION' ) )
    require_once( 'trql.vaesoli.class.php' );

if ( ! defined( 'GEOSHAPE_CLASS_VERSION' ) )
    require_once( 'trql.geoshape.class.php' );



defined( 'GEOCIRCLE_CLASS_VERSION' ) or define( 'GEOCIRCLE_CLASS_VERSION','0.1' );

/* ==================================================================================== */
/** {{*class GeoCircle=

    {*desc

        A GeoCircle is a GeoShape representing a circular geographic area. As it is
        a GeoShape it provides the simple textual property 'circle', but also
        allows the combination of postalCode alongside geoRadius. The center of the
        circle can be indicated via the 'geoMidpoint' property, or more
        approximately using 'address', 'postalCode'.

    *}

    {*credits
        The whole concept is derived from the fabulous work of Schema.org
        under the terms of their license:
        [url]http://schema.org/docs/terms.html[/url]
    *}

    {*doc [url]http://schema.org/GeoCircle[/url] *}

    {*warning
        This class has been generated automatically by [c]trql.schemaclassgenerator.class.php[/c]
        on 26-08-2020 18:48. IT HAS NOT BEEN TESTED YET!
    *}

 */
/* ==================================================================================== */
class GeoCircle extends GeoShape
/*--------------------------------------*/
{
    protected   $self = array( 'file'   => __FILE__     ,           /* {*property   $self                           (array)                         Fixed 'class' information. *} */
                               'class'  => __CLASS__    ,
                               'name'   => null         ,
                               'birth'  => null         ,
                               'home'   => null         ,
                               'family' => null         ,
                               'UIKey'  => null         ,
                             );

    public      $additionalType                 = null;             /* {*property   $additionalType                 (URL)                           An additional type for the item, typically used for adding more
                                                                                                                                                    specific types from external vocabularies in microdata syntax. This is
                                                                                                                                                    a relationship between something and a class that the thing is in. In
                                                                                                                                                    RDFa syntax, it is better to use the native RDFa syntax - the 'typeof'
                                                                                                                                                    attribute - for multiple types. Schema.org tools may have only weaker
                                                                                                                                                    understanding of extra types, in particular those defined externally. *} */
    public      $address                        = null;             /* {*property   $address                        (PostalAddress|string)          Physical address of the item. *} */
    public      $addressCountry                 = null;             /* {*property   $addressCountry                 (string|Country)                The country. For example, USA. You can also provide the two-letter ISO
                                                                                                                                                    3166-1 alpha-2 country code. *} */
    public      $alternateName                  = null;             /* {*property   $alternateName                  (string)                        An alias for the item. *} */
    public      $box                            = null;             /* {*property   $box                            (string)                        A box is the area enclosed by the rectangle formed by two points. The
                                                                                                                                                    first point is the lower corner, the second point is the upper corner.
                                                                                                                                                    A box is expressed as two points separated by a space character. *} */
    public      $circle                         = null;             /* {*property   $circle                         (string)                        A circle is the circular region of a specified radius centered at a
                                                                                                                                                    specified latitude and longitude. A circle is expressed as a pair
                                                                                                                                                    followed by a radius in meters. *} */
    public      $description                    = null;             /* {*property   $description                    (string)                        A description of the item. *} */
    public      $disambiguatingDescription      = null;             /* {*property   $disambiguatingDescription      (string)                        A sub property of description. A short description of the item used to
                                                                                                                                                    disambiguate from other, similar items. Information from other
                                                                                                                                                    properties (in particular, name) may be necessary for the description
                                                                                                                                                    to be useful for disambiguation. *} */
    public      $elevation                      = null;             /* {*property   $elevation                      (string|float)                  The elevation of a location (WGS 84). Values may be of the form
                                                                                                                                                    'NUMBER UNITOFMEASUREMENT' (e.g., '1,000 m', '3,200 ft') while numbers
                                                                                                                                                    alone should be assumed to be a value in meters. *} */
    public      $geoMidpoint                    = null;             /* {*property   $geoMidpoint                    (GeoCoordinates)                Indicates the GeoCoordinates at the centre of a GeoShape e.g.
                                                                                                                                                    GeoCircle. *} */
    public      $geoRadius                      = null;             /* {*property   $geoRadius                      (string|float|Distance)         Indicates the approximate radius of a GeoCircle (metres unless
                                                                                                                                                    indicated otherwise via Distance notation). *} */
    public      $identifier                     = null;             /* {*property   $identifier                     (URL|string|PropertyValue)      The identifier property represents any kind of identifier for any kind
                                                                                                                                                    of Thing, such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides
                                                                                                                                                    dedicated properties for representing many of these, either as textual
                                                                                                                                                    strings or as URL (URI) links. See background notes for more details. *} */
    public      $image                          = null;             /* {*property   $image                          (ImageObject|URL)               An image of the item. This can be a URL or a fully described
                                                                                                                                                    ImageObject. *} */
    public      $line                           = null;             /* {*property   $line                           (string)                        A line is a point-to-point path consisting of two or more points. A
                                                                                                                                                    line is expressed as a series of two or more point objects separated
                                                                                                                                                    by space. *} */
    public      $mainEntityOfPage               = null;             /* {*property   $mainEntityOfPage               (CreativeWork|URL)              Indicates a page (or other CreativeWork) for which this thing is the
                                                                                                                                                    main entity being described. See background notes for details. *} */
    public      $name                           = null;             /* {*property   $name                           (string)                        The name of the item. *} */
    public      $polygon                        = null;             /* {*property   $polygon                        (string)                        A polygon is the area enclosed by a point-to-point path for which the
                                                                                                                                                    starting and ending points are the same. A polygon is expressed as a
                                                                                                                                                    series of four or more space delimited points where the first and
                                                                                                                                                    final points are identical. *} */
    public      $postalCode                     = null;             /* {*property   $postalCode                     (string)                        The postal code. For example, 94043. *} */
    public      $potentialAction                = null;             /* {*property   $potentialAction                (Action)                        Indicates a potential Action, which describes an idealized action in
                                                                                                                                                    which this thing would play an 'object' role. *} */
    public      $sameAs                         = null;             /* {*property   $sameAs                         (URL)                           URL of a reference Web page that unambiguously indicates the item's
                                                                                                                                                    identity. E.g. the URL of the item's Wikipedia page, Wikidata entry,
                                                                                                                                                    or official website. *} */
    public      $subjectOf                      = null;             /* {*property   $subjectOf                      (Event|CreativeWork)            A CreativeWork or Event about this Thing. *} */
    public      $url                            = null;             /* {*property   $url                            (URL)                           URL of the item. *} */


    /* === [Properties NOT defined in schema.org] ===================================== */


    /* ================================================================================ */
    /** {{*__construct( [$szHome] )=

        Class constructor

        {*params
            $szHome     (string)        Home of the class. Optional.
        *}

        {*return
            (self)      The current instance of the class
        *}

        *}}
    */
    /* ================================================================================ */
    public function __construct( $szHome = null )
    /*-----------------------------------------*/
    {
        parent::__construct();
        $this->updateSelf( __CLASS__,'/q/common/trql.classes.home/' . basename( __FILE__,'.php' ) );

        $this->die( __CLASS__ . ' has NOT been tested yet! Disable this line when you have tested the class.' );

        return ( $this );
    }   /* End of GeoCircle.__construct() ========================================== */
    /* ================================================================================ */


    /* ================================================================================ */
    /** {{*__destruct()=

        Class destructor

        {*params
        *}

        {*return
            (void)      No return
        *}

        *}}
    */
    /* ================================================================================ */
    public function __destruct()
    /*------------------------*/
    {
        $this->backup();
        $this->autodoc();
        $this->UIKey();
    }   /* End of GeoCircle.__destruct() =========================================== */
    /* ================================================================================ */

}   /* End of class GeoCircle ====================================================== */
/* ==================================================================================== */

?>